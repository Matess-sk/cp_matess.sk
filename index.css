# FILE: package.json
{
  "name": "web-price-calculator",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.7",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.6.2",
    "vite": "^5.4.6"
  }
}

# FILE: vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: { alias: { '@': path.resolve(__dirname, 'src') } },
  base: '/',
  build: { outDir: 'dist' }
})

# FILE: tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"] }
  },
  "include": ["src"]
}

# FILE: tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    './index.html',
    './src/**/*.{ts,tsx,js,jsx}'
  ],
  theme: { extend: {} },
  plugins: []
}

# FILE: postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

# FILE: index.html
<!doctype html>
<html lang="sk">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Kalkulačka ceny webu</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

# FILE: src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body, #root { height: 100%; }

# FILE: src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

# FILE: src/App.tsx
import Calculator from './components/WebPricingCalculator'

export default function App() {
  return (
    <div className="min-h-screen bg-slate-50">
      <Calculator />
    </div>
  )
}

# FILE: src/components/WebPricingCalculator.tsx
import React, { useMemo, useState } from 'react'

type Currency = 'EUR' | 'USD' | 'CZK'
const CURRENCY_SYMBOL: Record<Currency, string> = { EUR: '€', USD: '$', CZK: 'Kč' }
const FX: Record<Currency, number> = { EUR: 1, USD: 1.1, CZK: 25 }

const COEFS = {
  dizajn: { basic: 1, custom: 1.25, premium: 1.6 },
  cms: { none: 0, wp: 0.25, headless: 0.5 },
  eshop: { none: 0, simple: 0.5, advanced: 1.1 },
  seo: { none: 0, basic: 0.15, pro: 0.35 },
  multilangPerLang: 0.12,
  accessibility: 0.12,
  performance: 0.1,
}

const fmt = (n: number, c: Currency) => new Intl.NumberFormat('sk-SK', { style: 'currency', currency: c }).format(n)

export default function WebPricingCalculator() {
  const [currency, setCurrency] = useState<Currency>('EUR')
  const [hourly, setHourly] = useState(35)
  const [baseHours, setBaseHours] = useState(20)
  const [pages, setPages] = useState(6)
  const [complexity, setComplexity] = useState(1.1)

  const [design, setDesign] = useState<'basic' | 'custom' | 'premium'>('custom')
  const [cms, setCms] = useState<'none' | 'wp' | 'headless'>('wp')
  const [eshop, setEshop] = useState<'none' | 'simple' | 'advanced'>('none')
  const [seo, setSeo] = useState<'none' | 'basic' | 'pro'>('basic')

  const [multilang, setMultilang] = useState(1)
  const [accessibility, setAccessibility] = useState(true)
  const [performance, setPerformance] = useState(true)

  const [customFeatures, setCustomFeatures] = useState<string>('')
  const [maintenanceMonthly, setMaintenanceMonthly] = useState(0)
  const [hostingMonthly, setHostingMonthly] = useState(0)

  const [rush, setRush] = useState(0)
  const [discount, setDiscount] = useState(0)
  const [vat, setVat] = useState(0)

  const parsedFeatures = useMemo(() => {
    const rows = customFeatures.split(/\n|,/).map(s => s.trim()).filter(Boolean)
    const out: { name: string; hours: number }[] = []
    for (const r of rows) {
      const [name, h] = r.split(':')
      const hours = Number((h ?? '0').replace(',', '.'))
      if (name && !isNaN(hours) && hours > 0) out.push({ name: name.trim(), hours })
    }
    return out
  }, [customFeatures])

  const hoursBreakdown = useMemo(() => {
    const hBase = baseHours * complexity
    const hPages = Math.max(0, pages - 1) * 2 * complexity
    const hDesign = hBase * (COEFS.dizajn[design] - 1)
    const hCms = hBase * COEFS.cms[cms]
    const hShop = hBase * COEFS.eshop[eshop]
    const hSeo = hBase * COEFS.seo[seo]
    const hI18n = multilang > 1 ? hBase * COEFS.multilangPerLang * (multilang - 1) : 0
    const hA11y = accessibility ? hBase * COEFS.accessibility : 0
    const hPerf = performance ? hBase * COEFS.performance : 0
    const hCustom = parsedFeatures.reduce((a, b) => a + b.hours, 0)

    const subtotalHours = hBase + hPages + hDesign + hCms + hShop + hSeo + hI18n + hA11y + hPerf + hCustom

    return { hBase, hPages, hDesign, hCms, hShop, hSeo, hI18n, hA11y, hPerf, hCustom, subtotalHours } as const
  }, [baseHours, complexity, pages, design, cms, eshop, seo, multilang, accessibility, performance, parsedFeatures])

  const price = useMemo(() => {
    const rate = hourly * FX[currency]
    const subtotal = hoursBreakdown.subtotalHours * rate
    const rushAmt = subtotal * (rush / 100)
    const discountAmt = subtotal * (discount / 100)
    const oneOff = Math.max(0, subtotal + rushAmt - discountAmt)
    const monthly = (maintenanceMonthly + hostingMonthly) * FX[currency]
    const vatAmt = vat > 0 ? oneOff * (vat / 100) : 0
    const total = oneOff + vatAmt
    return { rate, subtotal, rushAmt, discountAmt, oneOff, monthly, vatAmt, total } as const
  }, [hourly, currency, hoursBreakdown.subtotalHours, rush, discount, maintenanceMonthly, hostingMonthly, vat])

  const Row = ({ label, value, strong = false, large = false }: { label: string; value: string; strong?: boolean; large?: boolean }) => (
    <div className={`flex items-center justify-between ${large ? 'text-base' : 'text-sm'}`}>
      <span className="text-slate-600">{label}</span>
      <span className={`${strong ? 'font-semibold' : ''}`}>{value}</span>
    </div>
  )

  return (
    <div className="mx-auto max-w-6xl p-6 md:p-10">
      <header className="mb-6 flex flex-col gap-2 md:flex-row md:items-end md:justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Kalkulačka ceny webu</h1>
          <p className="text-slate-600">Vypočítaj odhad podľa parametrov.</p>
        </div>
        <div className="flex items-center gap-2">
          <select value={currency} onChange={e => setCurrency(e.target.value as Currency)} className="rounded border px-2 py-1">
            <option value="EUR">EUR</option>
            <option value="USD">USD</option>
            <option value="CZK">CZK</option>
          </select>
          <button onClick={() => {
            setCurrency('EUR'); setHourly(35); setBaseHours(20); setPages(6); setComplexity(1.1);
            setDesign('custom'); setCms('wp'); setEshop('none'); setSeo('basic'); setMultilang(1);
            setAccessibility(true); setPerformance(true); setCustomFeatures(''); setMaintenanceMonthly(0);
            setHostingMonthly(0); setRush(0); setDiscount(0); setVat(0);
          }} className="rounded border px-3 py-1">Reset</button>
        </div>
      </header>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2 space-y-6">
          <section className="rounded-2xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-lg font-semibold">Základ projektu</h2>
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Hodinová sadzba</span>
                <div className="flex items-center gap-2">
                  <input type="number" value={hourly} onChange={e => setHourly(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
                  <span className="rounded border px-2 py-1 text-sm">{CURRENCY_SYMBOL[currency]}/h</span>
                </div>
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Základné hodiny</span>
                <input type="number" value={baseHours} onChange={e => setBaseHours(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Počet podstránok</span>
                <input type="number" value={pages} onChange={e => setPages(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Komplexita (1.0 – 1.8)</span>
                <input type="number" step="0.05" min={0.8} max={1.8} value={complexity} onChange={e => setComplexity(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Dizajn</span>
                <select value={design} onChange={e => setDesign(e.target.value as any)} className="w-full rounded border px-3 py-2">
                  <option value="basic">Šablónový</option>
                  <option value="custom">Na mieru</option>
                  <option value="premium">Prémiový</option>
                </select>
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">CMS</span>
                <select value={cms} onChange={e => setCms(e.target.value as any)} className="w-full rounded border px-3 py-2">
                  <option value="none">Bez CMS</option>
                  <option value="wp">WordPress</option>
                  <option value="headless">Headless</option>
                </select>
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">E‑shop</span>
                <select value={eshop} onChange={e => setEshop(e.target.value as any)} className="w-full rounded border px-3 py-2">
                  <option value="none">Bez e‑shopu</option>
                  <option value="simple">Jednoduchý</option>
                  <option value="advanced">Pokročilý</option>
                </select>
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">SEO balík</span>
                <select value={seo} onChange={e => setSeo(e.target.value as any)} className="w-full rounded border px-3 py-2">
                  <option value="none">Žiadny</option>
                  <option value="basic">Základ</option>
                  <option value="pro">Pro</option>
                </select>
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Počet jazykov</span>
                <input type="number" value={multilang} onChange={e => setMultilang(Math.max(1, Number(e.target.value)))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="flex items-center gap-2 pt-2">
                <input type="checkbox" checked={accessibility} onChange={e => setAccessibility(e.target.checked)} />
                <span>Prístupnosť (WCAG)</span>
              </label>
              <label className="flex items-center gap-2 pt-2">
                <input type="checkbox" checked={performance} onChange={e => setPerformance(e.target.checked)} />
                <span>Výkon a optimalizácia</span>
              </label>
            </div>
          </section>

          <section className="rounded-2xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-lg font-semibold">Vlastné funkcionality</h2>
            <p className="mb-2 text-sm text-slate-600">Každý riadok: <code>nazov:hodiny</code></p>
            <textarea rows={5} value={customFeatures} onChange={e => setCustomFeatures(e.target.value)} placeholder={"Rezervácie:10\nIntegrácia CRM:6\nPlatobná brána:4"} className="w-full rounded border px-3 py-2"></textarea>
          </section>

          <section className="rounded-2xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-lg font-semibold">Prevádzka a podmienky</h2>
            <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Údržba mesačne</span>
                <input type="number" value={maintenanceMonthly} onChange={e => setMaintenanceMonthly(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Hosting mesačne</span>
                <input type="number" value={hostingMonthly} onChange={e => setHostingMonthly(Number(e.target.value))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">DPH (%)</span>
                <input type="number" value={vat} onChange={e => setVat(Math.max(0, Number(e.target.value)))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Prirážka za urgentnosť (%)</span>
                <input type="number" value={rush} onChange={e => setRush(Math.max(0, Number(e.target.value)))} className="w-full rounded border px-3 py-2" />
              </label>
              <label className="space-y-1">
                <span className="text-sm text-slate-600">Zľava (%)</span>
                <input type="number" value={discount} onChange={e => setDiscount(Math.max(0, Number(e.target.value)))} className="w-full rounded border px-3 py-2" />
              </label>
            </div>
          </section>
        </div>

        <aside className="space-y-6">
          <section className="sticky top-6 rounded-2xl border bg-white p-4 shadow-md">
            <div className="mb-2 flex items-center justify-between">
              <h2 className="text-lg font-semibold">Odhad ceny</h2>
              <span className="rounded bg-slate-100 px-2 py-1 text-sm">{hoursBreakdown.subtotalHours.toFixed(1)} h</span>
            </div>
            <div className="text-3xl font-bold">{fmt(price.total, currency)}</div>
            <div className="text-sm text-slate-600">Bez DPH: {fmt(price.oneOff, currency)} • Sadzba: {fmt(price.rate, currency)}/h</div>
            {price.monthly > 0 && <div className="text-sm text-slate-600">Mesačne: {fmt(price.monthly, currency)}</div>}

            <div className="mt-3 space-y-2 text-sm">
              <Row label="Medzisúčet" value={fmt(price.subtotal, currency)} />
              {price.rushAmt > 0 && <Row label="Prirážka za urgentnosť" value={fmt(price.rushAmt, currency)} />}
              {price.discountAmt > 0 && <Row label="Zľava" value={fmt(-price.discountAmt, currency)} />}
              <Row label="Jednorazovo bez DPH" value={fmt(price.oneOff, currency)} strong />
              {price.vatAmt > 0 && <Row label="DPH" value={fmt(price.vatAmt, currency)} />}
              <Row label="Spolu" value={fmt(price.total, currency)} strong large />
            </div>

            <details className="mt-3">
              <summary className="cursor-pointer text-sm font-medium">Rozpis hodín</summary>
              <div className="mt-2 space-y-1 text-sm">
                {(
                  [
                    ['Základ', hoursBreakdown.hBase],
                    ['Podstránky', hoursBreakdown.hPages],
                    ['Dizajn', hoursBreakdown.hDesign],
                    ['CMS', hoursBreakdown.hCms],
                    ['E‑shop', hoursBreakdown.hShop],
                    ['SEO', hoursBreakdown.hSeo],
                    ['Jazyky', hoursBreakdown.hI18n],
                    ['Prístupnosť', hoursBreakdown.hA11y],
                    ['Výkon', hoursBreakdown.hPerf],
                    ['Vlastné funkcie', hoursBreakdown.hCustom],
                  ] as const
                ).filter(([, v]) => v && v > 0.001).map(([k, v]) => (
                  <div key={String(k)} className="flex items-center justify-between">
                    <span className="text-slate-600">{k}</span>
                    <span className="tabular-nums">{v.toFixed(1)} h</span>
                  </div>
                ))}
                <div className="mt-2 flex items-center justify-between border-t pt-2 font-semibold">
                  <span>Spolu</span>
                  <span className="tabular-nums">{hoursBreakdown.subtotalHours.toFixed(1)} h</span>
                </div>
              </div>
            </details>
          </section>

          <section className="rounded-2xl border bg-white p-4 shadow-sm">
            <h3 className="mb-2 text-sm font-semibold">Citácia do ponuky</h3>
            <textarea readOnly className="h-28 w-full resize-none rounded border p-2 text-sm">{
`Odhad jednorazových nákladov: ${fmt(price.total, currency)} (${fmt(price.oneOff, currency)} bez DPH).
Predpokladané trvanie: ${hoursBreakdown.subtotalHours.toFixed(1)} h pri sadzbe ${fmt(price.rate, currency)}/h.
Mesačné náklady: ${price.monthly > 0 ? fmt(price.monthly, currency) : '0'}.`}
            </textarea>
          </section>
        </aside>
      </div>

      <footer className="pt-6 text-center text-xs text-slate-500">
        Model výpočtu je odhad. Uprav sadzby a koeficienty podľa reálneho projektu.
      </footer>
    </div>
  )
}

# FILE: public/CNAME
cp.matess.sk

# FILE: .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: npm ci || npm i
      - name: Build
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
